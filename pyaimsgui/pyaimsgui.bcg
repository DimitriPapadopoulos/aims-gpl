import types

class PyAimsGuiComponent( GenericMakerComponent ):
  _name = 'pyaimsgui'

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def dependencies( self ):
    return [ "pyaims(aims)", PyQtComponent, AimsGuiComponent ]

  def libraries( self ):
    return []

  #def build( self, instances ):
    #if not self._found or self._data[ 'enabled' ] == '0':
      #return
    ## genrate SIP files from templates
    #source = os.path.join( self.sourceDir(), 'src', 'sip' )
    #build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    #cwd = os.getcwd()
    #os.chdir( source )
    #cmd = sys.executable + ' maketemplates.py -c -o "' + build + '"'
    #print cmd
    #res = os.system( cmd )
    #if res != 0:
      #raise RuntimeError( 'maketemplates.py failed: return code:' \
        #+ str( res ) )
    #os.chdir( cwd )
    ## regular build
    #print 'regular build'
    #GenericMakerComponent.build( self, instances )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma.aims.gui'

