import types

class PyAimsGuiComponent( GenericMakerComponent ):
  _name = 'pyaimsgui'

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip_gui' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sip_gui' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def dependencies( self ):
    return [ "pyaims(aims)", PyQtComponent, AimsGuiComponent ]

  def libraries( self ):
    return []

  def doEpydoc( self ):
    return False

  #def pythonModule( self ):
    #return 'soma.aims.aimsgui'

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip_gui' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip_gui' )
    cwd = os.getcwd()
    os.chdir( source )
    pyaims = getInstance( PyAimsComponent )
    pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
    print 'running maketemplates:'
    print sys.executable + ' "' \
                + os.path.join( pad, 'maketemplates.py' ) + '" -s "' + pad \
                + '" -t "' + os.path.join( pad, 'typessub.py' ) + '"' \
                +' -i generatedtypes.py -c -o "' \
                + build + '"'
    res = os.system( sys.executable + ' "' \
                + os.path.join( pad, 'maketemplates.py' ) + '" -s "' + pad \
                + '" -t "' + os.path.join( pad, 'typessub.py' ) + '"' \
                +' -i generatedtypes.py -c -o "' \
                + build + '"' )
    print 'res:', res
    if res != 0:
      raise RuntimeError( 'maketemplates.py failed: return code:' \
        + str( res ) )
    os.chdir( cwd )
    # regular build
    GenericMakerComponent.build( self, instances )
